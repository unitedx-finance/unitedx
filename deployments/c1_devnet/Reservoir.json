{
  "address": "0xA47Fcbc52d5b75aAB446E58817ab82e1cFA67A99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dripRate_",
          "type": "uint256"
        },
        {
          "internalType": "contract EIP20Interface",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "drip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripped",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract EIP20Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xad21f325b6da714865fc06c2dd3b1f0bb4388f1bf2ad32f8e425c5034f8cb875",
  "receipt": {
    "to": null,
    "from": "0x1946a1DD383FE3c3cd9ae3066C638EF6ed7E35e5",
    "contractAddress": "0xA47Fcbc52d5b75aAB446E58817ab82e1cFA67A99",
    "transactionIndex": 0,
    "gasUsed": "399736",
    "logsBloom": "0x
    "blockHash": "0x0d5d76685cf3f180e5a844577084643631d9262623c44a3826835ee542828a9c",
    "transactionHash": "0xad21f325b6da714865fc06c2dd3b1f0bb4388f1bf2ad32f8e425c5034f8cb875",
    "logs": [],
    "blockNumber": 14557695,
    "cumulativeGasUsed": "399736",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "250000000000000000000",
    "0x9AfFD78287F978d875A29ab1CA0f368847fc2291",
    "0x75846d18fF4C88ef2FBF40D7898008c5f4dC9F98"
  ],
  "numDeployments": 1,
  "solcInputHash": "1c5f83e03ba8a8ab92707613a27af150",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dripRate_\",\"type\":\"uint256\"},{\"internalType\":\"contract EIP20Interface\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"drip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract EIP20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"details\":\"This contract must be poked via the `drip()` function every so often.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"dripRate_\":\"Numer of tokens per block to drip\",\"target_\":\"The recipient of dripped tokens\",\"token_\":\"The token to drip\"}},\"drip()\":{\"details\":\"Note: this will only drip up to the amount of tokens available.\",\"returns\":{\"_0\":\"The amount of tokens dripped in this call\"}}},\"title\":\"Reservoir Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs a Reservoir\"},\"drip()\":{\"notice\":\"Drips the maximum amount of tokens to match the drip rate since inception\"},\"dripRate()\":{\"notice\":\"Tokens per block that to drip to target (immutable)\"},\"dripStart()\":{\"notice\":\"The block number when the Reservoir started (immutable)\"},\"dripped()\":{\"notice\":\"Amount that has already been dripped\"},\"target()\":{\"notice\":\"Target to receive dripped tokens (immutable)\"},\"token()\":{\"notice\":\"Reference to token to drip (immutable)\"}},\"notice\":\"Distributes a token to a different contract at a fixed rate.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Reservoir.sol\":\"Reservoir\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xf44fc7783d4a0060119f0096a122c3f305c7a03da75aa21408393d8d7a2e649b\",\"license\":\"BSD-3-Clause\"},\"contracts/Reservoir.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Reservoir Contract\\n * @notice Distributes a token to a different contract at a fixed rate.\\n * @dev This contract must be poked via the `drip()` function every so often.\\n * @author Compound\\n */\\ncontract Reservoir {\\n\\n  /// @notice The block number when the Reservoir started (immutable)\\n  uint public dripStart;\\n\\n  /// @notice Tokens per block that to drip to target (immutable)\\n  uint public dripRate;\\n\\n  /// @notice Reference to token to drip (immutable)\\n  EIP20Interface public token;\\n\\n  /// @notice Target to receive dripped tokens (immutable)\\n  address public target;\\n\\n  /// @notice Amount that has already been dripped\\n  uint public dripped;\\n\\n  /**\\n    * @notice Constructs a Reservoir\\n    * @param dripRate_ Numer of tokens per block to drip\\n    * @param token_ The token to drip\\n    * @param target_ The recipient of dripped tokens\\n    */\\n  constructor(uint dripRate_, EIP20Interface token_, address target_) public {\\n    dripStart = block.number;\\n    dripRate = dripRate_;\\n    token = token_;\\n    target = target_;\\n    dripped = 0;\\n  }\\n\\n  /**\\n    * @notice Drips the maximum amount of tokens to match the drip rate since inception\\n    * @dev Note: this will only drip up to the amount of tokens available.\\n    * @return The amount of tokens dripped in this call\\n    */\\n  function drip() public returns (uint) {\\n    // First, read storage into memory\\n    EIP20Interface token_ = token;\\n    uint reservoirBalance_ = token_.balanceOf(address(this)); // TODO: Verify this is a static call\\n    uint dripRate_ = dripRate;\\n    uint dripStart_ = dripStart;\\n    uint dripped_ = dripped;\\n    address target_ = target;\\n    uint blockNumber_ = block.number;\\n\\n    // Next, calculate intermediate values\\n    uint dripTotal_ = mul(dripRate_, blockNumber_ - dripStart_, \\\"dripTotal overflow\\\");\\n    uint deltaDrip_ = sub(dripTotal_, dripped_, \\\"deltaDrip underflow\\\");\\n    uint toDrip_ = min(reservoirBalance_, deltaDrip_);\\n    uint drippedNext_ = add(dripped_, toDrip_, \\\"tautological\\\");\\n\\n    // Finally, write new `dripped` value and transfer tokens to target\\n    dripped = drippedNext_;\\n    token_.transfer(target_, toDrip_);\\n\\n    return toDrip_;\\n  }\\n\\n  /* Internal helper functions for safe math */\\n\\n  function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n    uint c;\\n    unchecked { c = a + b; }\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n    require(b <= a, errorMessage);\\n    uint c = a - b;\\n    return c;\\n  }\\n\\n  function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint c;\\n    unchecked { c = a * b; }\\n    require(c / a == b, errorMessage);\\n    return c;\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint) {\\n    if (a <= b) {\\n      return a;\\n    } else {\\n      return b;\\n    }\\n  }\\n}\\n\\nimport \\\"./EIP20Interface.sol\\\";\\n\",\"keccak256\":\"0x2afb0b840aa689479596512a23413f54c03fb8a50b33e286c7c43b025fda768a\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161056738038061056783398101604081905261002f91610087565b436000908155600193909355600280546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556004556100ca565b6001600160a01b038116811461008457600080fd5b50565b60008060006060848603121561009c57600080fd5b8351925060208401516100ae8161006f565b60408501519092506100bf8161006f565b809150509250925092565b61048e806100d96000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806388a91a8a1461006757806395f632b3146100835780639f678cca1461008c578063d326159214610094578063d4b839921461009d578063fc0c546a146100c8575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b61007060045481565b6100706100db565b61007060015481565b6003546100b0906001600160a01b031681565b6040516001600160a01b03909116815260200161007a565b6002546100b0906001600160a01b031681565b6002546040516370a0823160e01b81523060048201526000916001600160a01b031690829082906370a0823190602401602060405180830381865afa158015610128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014c9190610381565b6001546000805460045460035494955092939092916001600160a01b039091169043906101ad8661017d878561039a565b6040518060400160405280601281526020017164726970546f74616c206f766572666c6f7760701b8152506102b6565b905060006101e782866040518060400160405280601381526020017264656c74614472697020756e646572666c6f7760681b815250610307565b905060006101f58983610341565b9050600061022887836040518060400160405280600c81526020016b1d185d5d1bdb1bd9da58d85b60a21b81525061035a565b600481815560405163a9059cbb60e01b81526001600160a01b0389811692820192909252602481018590529192508c169063a9059cbb906044016020604051808303816000875af1158015610281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a591906103bf565b50909b9a5050505050505050505050565b6000836102c557506000610300565b838302836102d386836103e1565b1483906102fc5760405162461bcd60e51b81526004016102f39190610403565b60405180910390fd5b5090505b9392505050565b6000818484111561032b5760405162461bcd60e51b81526004016102f39190610403565b506000610338848661039a565b95945050505050565b6000818311610351575081610354565b50805b92915050565b600083830182858210156102fc5760405162461bcd60e51b81526004016102f39190610403565b60006020828403121561039357600080fd5b5051919050565b6000828210156103ba57634e487b7160e01b600052601160045260246000fd5b500390565b6000602082840312156103d157600080fd5b8151801515811461030057600080fd5b6000826103fe57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b8181101561043057858101830151858201604001528201610414565b81811115610442576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220c5e740844b3bf52f230e7e3cc36b18f38139a0e4753ddc65a8b1141859fb601264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806388a91a8a1461006757806395f632b3146100835780639f678cca1461008c578063d326159214610094578063d4b839921461009d578063fc0c546a146100c8575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b61007060045481565b6100706100db565b61007060015481565b6003546100b0906001600160a01b031681565b6040516001600160a01b03909116815260200161007a565b6002546100b0906001600160a01b031681565b6002546040516370a0823160e01b81523060048201526000916001600160a01b031690829082906370a0823190602401602060405180830381865afa158015610128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014c9190610381565b6001546000805460045460035494955092939092916001600160a01b039091169043906101ad8661017d878561039a565b6040518060400160405280601281526020017164726970546f74616c206f766572666c6f7760701b8152506102b6565b905060006101e782866040518060400160405280601381526020017264656c74614472697020756e646572666c6f7760681b815250610307565b905060006101f58983610341565b9050600061022887836040518060400160405280600c81526020016b1d185d5d1bdb1bd9da58d85b60a21b81525061035a565b600481815560405163a9059cbb60e01b81526001600160a01b0389811692820192909252602481018590529192508c169063a9059cbb906044016020604051808303816000875af1158015610281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a591906103bf565b50909b9a5050505050505050505050565b6000836102c557506000610300565b838302836102d386836103e1565b1483906102fc5760405162461bcd60e51b81526004016102f39190610403565b60405180910390fd5b5090505b9392505050565b6000818484111561032b5760405162461bcd60e51b81526004016102f39190610403565b506000610338848661039a565b95945050505050565b6000818311610351575081610354565b50805b92915050565b600083830182858210156102fc5760405162461bcd60e51b81526004016102f39190610403565b60006020828403121561039357600080fd5b5051919050565b6000828210156103ba57634e487b7160e01b600052601160045260246000fd5b500390565b6000602082840312156103d157600080fd5b8151801515811461030057600080fd5b6000826103fe57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b8181101561043057858101830151858201604001528201610414565b81811115610442576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220c5e740844b3bf52f230e7e3cc36b18f38139a0e4753ddc65a8b1141859fb601264736f6c634300080a0033",
  "devdoc": {
    "author": "Compound",
    "details": "This contract must be poked via the `drip()` function every so often.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "dripRate_": "Numer of tokens per block to drip",
          "target_": "The recipient of dripped tokens",
          "token_": "The token to drip"
        }
      },
      "drip()": {
        "details": "Note: this will only drip up to the amount of tokens available.",
        "returns": {
          "_0": "The amount of tokens dripped in this call"
        }
      }
    },
    "title": "Reservoir Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs a Reservoir"
      },
      "drip()": {
        "notice": "Drips the maximum amount of tokens to match the drip rate since inception"
      },
      "dripRate()": {
        "notice": "Tokens per block that to drip to target (immutable)"
      },
      "dripStart()": {
        "notice": "The block number when the Reservoir started (immutable)"
      },
      "dripped()": {
        "notice": "Amount that has already been dripped"
      },
      "target()": {
        "notice": "Target to receive dripped tokens (immutable)"
      },
      "token()": {
        "notice": "Reference to token to drip (immutable)"
      }
    },
    "notice": "Distributes a token to a different contract at a fixed rate.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22092,
        "contract": "contracts/Reservoir.sol:Reservoir",
        "label": "dripStart",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 22095,
        "contract": "contracts/Reservoir.sol:Reservoir",
        "label": "dripRate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 22099,
        "contract": "contracts/Reservoir.sol:Reservoir",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(EIP20Interface)14004"
      },
      {
        "astId": 22102,
        "contract": "contracts/Reservoir.sol:Reservoir",
        "label": "target",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 22105,
        "contract": "contracts/Reservoir.sol:Reservoir",
        "label": "dripped",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(EIP20Interface)14004": {
        "encoding": "inplace",
        "label": "contract EIP20Interface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}